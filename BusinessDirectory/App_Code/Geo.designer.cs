#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GoProGo.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GOPROGO")]
	public partial class GeoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblCity(GoProGo.Data.Entity.Geo.tblCity instance);
    partial void UpdatetblCity(GoProGo.Data.Entity.Geo.tblCity instance);
    partial void DeletetblCity(GoProGo.Data.Entity.Geo.tblCity instance);
    partial void InserttblCountry(GoProGo.Data.Entity.Geo.tblCountry instance);
    partial void UpdatetblCountry(GoProGo.Data.Entity.Geo.tblCountry instance);
    partial void DeletetblCountry(GoProGo.Data.Entity.Geo.tblCountry instance);
    partial void InserttblRegion(GoProGo.Data.Entity.Geo.tblRegion instance);
    partial void UpdatetblRegion(GoProGo.Data.Entity.Geo.tblRegion instance);
    partial void DeletetblRegion(GoProGo.Data.Entity.Geo.tblRegion instance);
    #endregion
		
		public GeoDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GOPROGOConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GeoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GoProGo.Data.Entity.Geo.tblCity> tblCities
		{
			get
			{
				return this.GetTable<GoProGo.Data.Entity.Geo.tblCity>();
			}
		}
		
		public System.Data.Linq.Table<GoProGo.Data.Entity.Geo.tblCountry> tblCountries
		{
			get
			{
				return this.GetTable<GoProGo.Data.Entity.Geo.tblCountry>();
			}
		}
		
		public System.Data.Linq.Table<GoProGo.Data.Entity.Geo.tblRegion> tblRegions
		{
			get
			{
				return this.GetTable<GoProGo.Data.Entity.Geo.tblRegion>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetAllCitites")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCity> GetAllCitites()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCity>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetRegionsByNameAndCountryID")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblRegion> GetRegionsByNameAndCountryID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(64)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CountryID", DbType="Int")] System.Nullable<int> countryID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, countryID);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblRegion>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetAllCountries")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCountry> GetAllCountries()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCountry>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetAllRegions")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblRegion> GetAllRegions()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblRegion>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetCitiesByNameAndRegionID")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCity> GetCitiesByNameAndRegionID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(64)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegionID", DbType="Int")] System.Nullable<int> regionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, regionID);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCity>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetCityByID")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCity> GetCityByID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCity>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetCityByRegion")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCity> GetCityByRegion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegionID", DbType="Int")] System.Nullable<int> regionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), regionID);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCity>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetCityByRegionAndCity")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCity> GetCityByRegionAndCity([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegionID", DbType="Int")] System.Nullable<int> regionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="City", DbType="NVarChar(255)")] string city)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), regionID, city);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCity>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetCountriesByName")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCountry> GetCountriesByName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(64)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCountry>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetCountryByCountry")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCountry> GetCountryByCountry([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Country", DbType="VarChar(255)")] string country)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), country);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCountry>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetCountryByID")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCountry> GetCountryByID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CountryID", DbType="Int")] System.Nullable<int> countryID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), countryID);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCountry>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetEnabledCountries")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCountry> GetEnabledCountries()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCountry>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetEnabledCountriesByName")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblCountry> GetEnabledCountriesByName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Country", DbType="NVarChar(64)")] string country)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), country);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblCountry>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetRegionByCountry")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblRegion> GetRegionByCountry([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CountryID", DbType="Int")] System.Nullable<int> countryID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), countryID);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblRegion>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetRegionByCountryAndRegion")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblRegion> GetRegionByCountryAndRegion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CountryID", DbType="Int")] System.Nullable<int> countryID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Region", DbType="VarChar(255)")] string region)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), countryID, region);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblRegion>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="GEO.GetRegionByID")]
		public ISingleResult<GoProGo.Data.Entity.Geo.tblRegion> GetRegionByID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((ISingleResult<GoProGo.Data.Entity.Geo.tblRegion>)(result.ReturnValue));
		}
	}
}
namespace GoProGo.Data.Entity.Geo
{
	using System.Runtime.Serialization;
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="GEO.tblCity")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class tblCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CountryID;
		
		private int _RegionID;
		
		private string _City;
		
		private string _Lattitude;
		
		private string _Longitude;
		
		private string _TimeZone;
		
		private string _DMAID;
		
		private string _Code;
		
		private EntityRef<tblCountry> _tblCountry;
		
		private EntityRef<tblRegion> _tblRegion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnLattitudeChanging(string value);
    partial void OnLattitudeChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    partial void OnTimeZoneChanging(string value);
    partial void OnTimeZoneChanged();
    partial void OnDMAIDChanging(string value);
    partial void OnDMAIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public tblCity()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._tblCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._tblRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(255)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lattitude", DbType="NVarChar(50)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Lattitude
		{
			get
			{
				return this._Lattitude;
			}
			set
			{
				if ((this._Lattitude != value))
				{
					this.OnLattitudeChanging(value);
					this.SendPropertyChanging();
					this._Lattitude = value;
					this.SendPropertyChanged("Lattitude");
					this.OnLattitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="NVarChar(50)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZone", DbType="NVarChar(10)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DMAID", DbType="NVarChar(5)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public string DMAID
		{
			get
			{
				return this._DMAID;
			}
			set
			{
				if ((this._DMAID != value))
				{
					this.OnDMAIDChanging(value);
					this.SendPropertyChanging();
					this._DMAID = value;
					this.SendPropertyChanged("DMAID");
					this.OnDMAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(5)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCountry_tblCity", Storage="_tblCountry", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public tblCountry tblCountry
		{
			get
			{
				return this._tblCountry.Entity;
			}
			set
			{
				tblCountry previousValue = this._tblCountry.Entity;
				if (((previousValue != value) 
							|| (this._tblCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCountry.Entity = null;
						previousValue.tblCities.Remove(this);
					}
					this._tblCountry.Entity = value;
					if ((value != null))
					{
						value.tblCities.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("tblCountry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRegion_tblCity", Storage="_tblRegion", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true)]
		public tblRegion tblRegion
		{
			get
			{
				return this._tblRegion.Entity;
			}
			set
			{
				tblRegion previousValue = this._tblRegion.Entity;
				if (((previousValue != value) 
							|| (this._tblRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblRegion.Entity = null;
						previousValue.tblCities.Remove(this);
					}
					this._tblRegion.Entity = value;
					if ((value != null))
					{
						value.tblCities.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("tblRegion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._tblCountry = default(EntityRef<tblCountry>);
			this._tblRegion = default(EntityRef<tblRegion>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="GEO.tblCountry")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class tblCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Country;
		
		private string _FIPS104;
		
		private string _ISO2;
		
		private string _ISO3;
		
		private System.Nullable<int> _ISON;
		
		private string _Internet;
		
		private string _Capital;
		
		private string _MapReference;
		
		private string _NationalitySingular;
		
		private string _NationalityPlural;
		
		private string _Currency;
		
		private string _CurrencyCode;
		
		private string _Population;
		
		private string _Comment;
		
		private string _Title;
		
		private System.Nullable<bool> _IsEnabled;
		
		private string _Flag;
		
		private bool _IsZipSearchAllowed;
		
		private EntitySet<tblCity> _tblCities;
		
		private EntitySet<tblRegion> _tblRegions;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnFIPS104Changing(string value);
    partial void OnFIPS104Changed();
    partial void OnISO2Changing(string value);
    partial void OnISO2Changed();
    partial void OnISO3Changing(string value);
    partial void OnISO3Changed();
    partial void OnISONChanging(System.Nullable<int> value);
    partial void OnISONChanged();
    partial void OnInternetChanging(string value);
    partial void OnInternetChanged();
    partial void OnCapitalChanging(string value);
    partial void OnCapitalChanged();
    partial void OnMapReferenceChanging(string value);
    partial void OnMapReferenceChanged();
    partial void OnNationalitySingularChanging(string value);
    partial void OnNationalitySingularChanged();
    partial void OnNationalityPluralChanging(string value);
    partial void OnNationalityPluralChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnCurrencyCodeChanging(string value);
    partial void OnCurrencyCodeChanged();
    partial void OnPopulationChanging(string value);
    partial void OnPopulationChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsEnabledChanging(System.Nullable<bool> value);
    partial void OnIsEnabledChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    partial void OnIsZipSearchAllowedChanging(bool value);
    partial void OnIsZipSearchAllowedChanged();
    #endregion
		
		public tblCountry()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(255)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIPS104", DbType="NVarChar(2)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string FIPS104
		{
			get
			{
				return this._FIPS104;
			}
			set
			{
				if ((this._FIPS104 != value))
				{
					this.OnFIPS104Changing(value);
					this.SendPropertyChanging();
					this._FIPS104 = value;
					this.SendPropertyChanged("FIPS104");
					this.OnFIPS104Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISO2", DbType="NVarChar(2)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string ISO2
		{
			get
			{
				return this._ISO2;
			}
			set
			{
				if ((this._ISO2 != value))
				{
					this.OnISO2Changing(value);
					this.SendPropertyChanging();
					this._ISO2 = value;
					this.SendPropertyChanged("ISO2");
					this.OnISO2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISO3", DbType="NVarChar(3)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string ISO3
		{
			get
			{
				return this._ISO3;
			}
			set
			{
				if ((this._ISO3 != value))
				{
					this.OnISO3Changing(value);
					this.SendPropertyChanging();
					this._ISO3 = value;
					this.SendPropertyChanged("ISO3");
					this.OnISO3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISON", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<int> ISON
		{
			get
			{
				return this._ISON;
			}
			set
			{
				if ((this._ISON != value))
				{
					this.OnISONChanging(value);
					this.SendPropertyChanging();
					this._ISON = value;
					this.SendPropertyChanged("ISON");
					this.OnISONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Internet", DbType="NVarChar(2)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string Internet
		{
			get
			{
				return this._Internet;
			}
			set
			{
				if ((this._Internet != value))
				{
					this.OnInternetChanging(value);
					this.SendPropertyChanging();
					this._Internet = value;
					this.SendPropertyChanged("Internet");
					this.OnInternetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capital", DbType="NVarChar(255)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public string Capital
		{
			get
			{
				return this._Capital;
			}
			set
			{
				if ((this._Capital != value))
				{
					this.OnCapitalChanging(value);
					this.SendPropertyChanging();
					this._Capital = value;
					this.SendPropertyChanged("Capital");
					this.OnCapitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapReference", DbType="NVarChar(255)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public string MapReference
		{
			get
			{
				return this._MapReference;
			}
			set
			{
				if ((this._MapReference != value))
				{
					this.OnMapReferenceChanging(value);
					this.SendPropertyChanging();
					this._MapReference = value;
					this.SendPropertyChanged("MapReference");
					this.OnMapReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalitySingular", DbType="NVarChar(255)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public string NationalitySingular
		{
			get
			{
				return this._NationalitySingular;
			}
			set
			{
				if ((this._NationalitySingular != value))
				{
					this.OnNationalitySingularChanging(value);
					this.SendPropertyChanging();
					this._NationalitySingular = value;
					this.SendPropertyChanged("NationalitySingular");
					this.OnNationalitySingularChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalityPlural", DbType="NVarChar(255)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11)]
		public string NationalityPlural
		{
			get
			{
				return this._NationalityPlural;
			}
			set
			{
				if ((this._NationalityPlural != value))
				{
					this.OnNationalityPluralChanging(value);
					this.SendPropertyChanging();
					this._NationalityPlural = value;
					this.SendPropertyChanged("NationalityPlural");
					this.OnNationalityPluralChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NVarChar(255)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12)]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyCode", DbType="NVarChar(255)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13)]
		public string CurrencyCode
		{
			get
			{
				return this._CurrencyCode;
			}
			set
			{
				if ((this._CurrencyCode != value))
				{
					this.OnCurrencyCodeChanging(value);
					this.SendPropertyChanging();
					this._CurrencyCode = value;
					this.SendPropertyChanged("CurrencyCode");
					this.OnCurrencyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Population", DbType="NVarChar(50)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14)]
		public string Population
		{
			get
			{
				return this._Population;
			}
			set
			{
				if ((this._Population != value))
				{
					this.OnPopulationChanging(value);
					this.SendPropertyChanging();
					this._Population = value;
					this.SendPropertyChanged("Population");
					this.OnPopulationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=16)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=17)]
		public System.Nullable<bool> IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag", DbType="VarChar(15)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=18)]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsZipSearchAllowed", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=19)]
		public bool IsZipSearchAllowed
		{
			get
			{
				return this._IsZipSearchAllowed;
			}
			set
			{
				if ((this._IsZipSearchAllowed != value))
				{
					this.OnIsZipSearchAllowedChanging(value);
					this.SendPropertyChanging();
					this._IsZipSearchAllowed = value;
					this.SendPropertyChanged("IsZipSearchAllowed");
					this.OnIsZipSearchAllowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCountry_tblCity", Storage="_tblCities", ThisKey="ID", OtherKey="CountryID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=20, EmitDefaultValue=false)]
		public EntitySet<tblCity> tblCities
		{
			get
			{
				if ((this.serializing 
							&& (this._tblCities.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._tblCities;
			}
			set
			{
				this._tblCities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCountry_tblRegion", Storage="_tblRegions", ThisKey="ID", OtherKey="CountryID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=21, EmitDefaultValue=false)]
		public EntitySet<tblRegion> tblRegions
		{
			get
			{
				if ((this.serializing 
							&& (this._tblRegions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._tblRegions;
			}
			set
			{
				this._tblRegions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCities(tblCity entity)
		{
			this.SendPropertyChanging();
			entity.tblCountry = this;
		}
		
		private void detach_tblCities(tblCity entity)
		{
			this.SendPropertyChanging();
			entity.tblCountry = null;
		}
		
		private void attach_tblRegions(tblRegion entity)
		{
			this.SendPropertyChanging();
			entity.tblCountry = this;
		}
		
		private void detach_tblRegions(tblRegion entity)
		{
			this.SendPropertyChanging();
			entity.tblCountry = null;
		}
		
		private void Initialize()
		{
			this._tblCities = new EntitySet<tblCity>(new Action<tblCity>(this.attach_tblCities), new Action<tblCity>(this.detach_tblCities));
			this._tblRegions = new EntitySet<tblRegion>(new Action<tblRegion>(this.attach_tblRegions), new Action<tblRegion>(this.detach_tblRegions));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="GEO.tblRegion")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class tblRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CountryID;
		
		private string _Region;
		
		private string _Code;
		
		private string _ADM1Code;
		
		private bool _IsEnabled;
		
		private EntitySet<tblCity> _tblCities;
		
		private EntityRef<tblCountry> _tblCountry;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnADM1CodeChanging(string value);
    partial void OnADM1CodeChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    #endregion
		
		public tblRegion()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._tblCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="NVarChar(255)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(2)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADM1Code", DbType="NVarChar(4)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string ADM1Code
		{
			get
			{
				return this._ADM1Code;
			}
			set
			{
				if ((this._ADM1Code != value))
				{
					this.OnADM1CodeChanging(value);
					this.SendPropertyChanging();
					this._ADM1Code = value;
					this.SendPropertyChanged("ADM1Code");
					this.OnADM1CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblRegion_tblCity", Storage="_tblCities", ThisKey="ID", OtherKey="RegionID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<tblCity> tblCities
		{
			get
			{
				if ((this.serializing 
							&& (this._tblCities.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._tblCities;
			}
			set
			{
				this._tblCities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCountry_tblRegion", Storage="_tblCountry", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public tblCountry tblCountry
		{
			get
			{
				return this._tblCountry.Entity;
			}
			set
			{
				tblCountry previousValue = this._tblCountry.Entity;
				if (((previousValue != value) 
							|| (this._tblCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCountry.Entity = null;
						previousValue.tblRegions.Remove(this);
					}
					this._tblCountry.Entity = value;
					if ((value != null))
					{
						value.tblRegions.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("tblCountry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblCities(tblCity entity)
		{
			this.SendPropertyChanging();
			entity.tblRegion = this;
		}
		
		private void detach_tblCities(tblCity entity)
		{
			this.SendPropertyChanging();
			entity.tblRegion = null;
		}
		
		private void Initialize()
		{
			this._tblCities = new EntitySet<tblCity>(new Action<tblCity>(this.attach_tblCities), new Action<tblCity>(this.detach_tblCities));
			this._tblCountry = default(EntityRef<tblCountry>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
